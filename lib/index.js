// Generated by CoffeeScript 1.6.3
var LiterateCoffeeScriptCompiler, coffeescript, docco, isLiterate, normalizeChecker, sourceFiles;

coffeescript = require('coffee-script');

docco = require('docco');

isLiterate = function(path) {
  return /\.(litcoffee|coffee\.md)$/.test(path);
};

normalizeChecker = function(item) {
  switch (toString.call(item)) {
    case '[object RegExp]':
      return function(string) {
        return item.test(string);
      };
    case '[object Function]':
      return item;
    default:
      return function() {
        return false;
      };
  }
};

sourceFiles = [];

module.exports = LiterateCoffeeScriptCompiler = (function() {
  LiterateCoffeeScriptCompiler.prototype.brunchPlugin = true;

  LiterateCoffeeScriptCompiler.prototype.type = 'javascript';

  LiterateCoffeeScriptCompiler.prototype.extension = 'litcoffee';

  LiterateCoffeeScriptCompiler.prototype.pattern = /\.(coffee\.md|litcoffee)$/;

  function LiterateCoffeeScriptCompiler(config) {
    var _ref, _ref1;
    this.config = config;
    this.isVendor = normalizeChecker((_ref = this.config) != null ? (_ref1 = _ref.conventions) != null ? _ref1.vendor : void 0 : void 0);
  }

  LiterateCoffeeScriptCompiler.prototype.onCompile = function(generatedFiles) {
    var _ref, _ref1, _ref2, _ref3;
    docco.document({
      sources: sourceFiles,
      layout: ((_ref = this.config) != null ? (_ref1 = _ref.documentation) != null ? _ref1.layout : void 0 : void 0) || 'parallel',
      output: ((_ref2 = this.config) != null ? (_ref3 = _ref2.documentation) != null ? _ref3.path : void 0 : void 0) || 'docs'
    });
    return sourceFiles = [];
  };

  LiterateCoffeeScriptCompiler.prototype.compile = function(data, path, callback) {
    var bare, compiled, err, error, options, result, _ref, _ref1, _ref2;
    bare = !this.isVendor(path);
    options = {
      bare: !this.isVendor(path),
      sourceMap: Boolean((_ref = this.config) != null ? _ref.sourceMaps : void 0),
      sourceFiles: [path],
      literate: isLiterate(path)
    };
    if (options.literate || ((_ref1 = this.config) != null ? (_ref2 = _ref1.documentation) != null ? _ref2.includeNonLitearte : void 0 : void 0)) {
      sourceFiles.push(path);
    }
    try {
      return compiled = coffeescript.compile(data, options);
    } catch (_error) {
      err = _error;
      return error = err;
    } finally {
      result = compiled && options.sourceMap ? {
        code: compiled.js,
        map: compiled.v3SourceMap
      } : compiled;
      callback(error, result);
    }
  };

  return LiterateCoffeeScriptCompiler;

})();
